#            _
#    _______| |__  _ __ ___
#   |_ / __| '_ \| '__/ __|
#  _ / /\__ \ | | | | | (__
# (_)___|___/_| |_|_|  \___|
#
# =====================================================
# 🚀 ZSH Configuration - Arch Linux Optimized
# =====================================================
# DON'T CHANGE THIS FILE
# 
# Custom configuration goes in:
# - ~/.config/zshrc/*.zsh
# - ~/.config/zshrc/custom/*.zsh (overrides)
# - ~/.zshrc_custom (single file override)
# =====================================================

# =====================================================
# 🔧 PERFORMANCE & OPTIMIZATION
# =====================================================

# Disable Oh My Zsh automatic updates
zstyle ':omz:update' mode disabled
ZSH_DISABLE_COMPFIX=true

# Compilation flags for performance
export ARCHFLAGS="-arch x86_64"

# Enable completion caching
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache

# =====================================================
# 📂 MODULAR CONFIGURATION LOADER
# =====================================================

# Load configuration files with error handling
load_config() {
    local config_dir="$1"
    [[ -d "$config_dir" ]] || return
    for config_file in "$config_dir"/**/*.zsh(N); do
        [[ -r "$config_file" ]] && source "$config_file" 2>/dev/null || echo "⚠️  Error loading: $config_file" >&2
    done
}

# Load configurations
load_config ~/.config/zshrc
load_config ~/.config/zshrc/custom
[[ -f ~/.zshrc_custom ]] && source ~/.zshrc_custom

# =====================================================
# 🧠 ZSH FRAMEWORK - Oh My Zsh + Powerlevel10k
# =====================================================

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Oh My Zsh Configuration
DISABLE_AUTO_TITLE="true"
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="yyyy-mm-dd"

# ULTRA OPTIMIZED: Minimal plugin list for maximum performance
plugins=(git archlinux sudo z)

# Load Oh My Zsh
[[ -f $ZSH/oh-my-zsh.sh ]] && source $ZSH/oh-my-zsh.sh || echo "⚠️  Oh My Zsh not found"

# Load Powerlevel10k configuration
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# =====================================================
# ⚙️ SHELL CONFIGURATION & ENVIRONMENT
# =====================================================

# History Configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000              # ULTRA REDUCED: From 25000 to 10000
SAVEHIST=10000             # ULTRA REDUCED: From 25000 to 10000
setopt HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE HIST_FIND_NO_DUPS HIST_SAVE_NO_DUPS INC_APPEND_HISTORY SHARE_HISTORY HIST_VERIFY HIST_REDUCE_BLANKS

# Shell Options
setopt CORRECT CORRECT_ALL NOCLOBBER AUTO_CD AUTO_PUSHD PUSHD_IGNORE_DUPS PUSHD_SILENT GLOB_DOTS EXTENDED_GLOB NUMERIC_GLOB_SORT NULL_GLOB

# Editor Configuration
export EDITOR='nvim' VISUAL='nvim' BROWSER='firefox' TERMINAL='kitty'

# Locale Configuration (Peru)
export LANG=es_PE.UTF-8 LC_ALL=es_PE.UTF-8 LC_COLLATE=C

# PATH Configuration
typeset -U path
path=(~/.local/bin ~/.cargo/bin ~/.bun/bin ~/.npm-global/bin /usr/local/bin $path)

# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config" XDG_DATA_HOME="$HOME/.local/share" XDG_CACHE_HOME="$HOME/.cache" XDG_STATE_HOME="$HOME/.local/state"

# Less/Man Pages Colorization
export LESS_TERMCAP_mb=$'\e[1;31m' LESS_TERMCAP_md=$'\e[1;36m' LESS_TERMCAP_me=$'\e[0m' LESS_TERMCAP_se=$'\e[0m' LESS_TERMCAP_so=$'\e[01;44;33m' LESS_TERMCAP_ue=$'\e[0m' LESS_TERMCAP_us=$'\e[1;32m' LESS='-R -i -w -M -z-4'

# FZF Configuration
export FZF_DEFAULT_OPTS="--color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796 --color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6 --color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796 --height=60% --layout=reverse --border --margin=1 --padding=1"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# =====================================================
# 🛠️ MODERN COMMAND REPLACEMENTS
# =====================================================

# File Operations
command -v bat &> /dev/null && { 
    alias cat='bat --style=plain --paging=never' 
    alias ccat='bat --style=full' 
    export BAT_THEME="Catppuccin Frappe" 
}

command -v eza &> /dev/null && { 
    alias ls='eza --icons --group-directories-first --git' 
    alias ll='eza -l --icons --group-directories-first --git --time-style=long-iso --smart-group' 
    alias la='eza -la --icons --group-directories-first --git --time-style=long-iso' 
    alias tree='eza --tree --level=3 --icons --git-ignore' 
    alias ltree='eza --tree --level=4 --icons --long --git-ignore' 
} || { 
    alias ll='ls -alF --color=auto --group-directories-first' 
    alias la='ls -A --color=auto --group-directories-first' 
}

command -v rg &> /dev/null && { 
    alias grep='rg --smart-case --hidden --glob "!**/.git/*" --glob "!**/node_modules/*"' 
    alias rga='rg --no-ignore --hidden' 
}

command -v fd &> /dev/null && { 
    alias find='fd' 
    alias fda='fd --no-ignore --hidden' 
}

# System Monitoring
command -v duf &> /dev/null && alias df='duf'
command -v dust &> /dev/null && alias du='dust'
command -v btop &> /dev/null && alias top='btop' || alias top='htop'
command -v delta &> /dev/null && alias diff='delta'
command -v xh &> /dev/null && alias http='xh'

# =====================================================
# 📁 NAVIGATION & FILE MANAGEMENT
# =====================================================

# Navigation shortcuts
alias ..='cd ..' ...='cd ../..' ....='cd ../../..' ~='cd ~' -- -='cd -'

# Directory shortcuts
alias dl='cd ~/Downloads' dt='cd ~/Desktop' dc='cd ~/Documents' dev='cd ~/Development' proj='cd ~/Projects'

# File operations with safety
alias rm='rm -i' cp='cp -i' mv='mv -i' mkdir='mkdir -p'

# Enhanced file operations
alias usage='du -h --max-depth=1 | sort -hr'
alias largest='find . -type f -printf "%s %p\n" | sort -rn | head -20'
alias newest='find . -type f -printf "%T+ %p\n" | sort -r | head -20'

# =====================================================
# 🐙 GIT ALIASES & FUNCTIONS
# =====================================================

# Essential Git aliases
alias g='git' gs='git status --short --branch' ga='git add' gaa='git add --all' 
alias gc='git commit --verbose' gcm='git commit -m' gca='git commit -am' 
alias gp='git push' gpl='git pull' gl='git log --oneline --graph --decorate --all -10' 
alias gd='git diff' gdc='git diff --cached' gco='git checkout' gb='git branch' 
alias gba='git branch -a' gbd='git branch -d' gm='git merge' gr='git rebase' 
alias gst='git stash' gstp='git stash pop' gf='git fetch' gcl='git clone'

# Advanced Git Functions
gac() { git add --all && git commit -m "$1" }
gacp() { git add --all && git commit -m "$1" && git push }
gundo() { git reset --soft HEAD~1 }
gamend() { git commit --amend --no-edit }
# Removed glog function to avoid conflict with gl alias

# =====================================================
# 🔧 SYSTEM & PACKAGE MANAGEMENT
# =====================================================

# Pacman aliases
alias pac='sudo pacman' pacs='pacman -Ss' paci='sudo pacman -S' pacr='sudo pacman -R' 
alias pacu='sudo pacman -Syu' pacq='pacman -Q' pacqi='pacman -Qi' pacql='pacman -Ql' 
alias pacqo='pacman -Qo' pacc='sudo pacman -Sc' paccc='sudo pacman -Scc'

# AUR helper
if command -v yay &> /dev/null; then
    alias aur='yay' aurs='yay -Ss' auri='yay -S' auru='yay -Syu'
elif command -v paru &> /dev/null; then
    alias aur='paru' aurs='paru -Ss' auri='paru -S' auru='paru -Syu'
fi

# System maintenance
alias cleanup='sudo pacman -Sc && sudo journalctl --vacuum-time=7d && sudo pacman -Rns $(pacman -Qtdq) 2>/dev/null || true'
alias orphans='pacman -Qtdq' fixkeys='sudo pacman-key --init && sudo pacman-key --populate archlinux'

# System information
alias sysinfo='inxi -Fxz' meminfo='free -h' diskinfo='lsblk' cpuinfo='lscpu' gpuinfo='lspci | grep -E "VGA|3D"'

# =====================================================
# 🌐 NETWORK & CONNECTIVITY
# =====================================================

alias myip='curl -s ifconfig.me && echo'
alias localip="ip route get 8.8.8.8 | awk '{print \$7}'"
alias ports='sudo lsof -i -P -n | grep LISTEN' netstat='ss -tuln'
alias ping='ping -c 5' wget='wget -c'

# Network testing
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
alias pingtest='ping -c 10 8.8.8.8'

# =====================================================
# 💻 DEVELOPMENT TOOLS
# =====================================================

# Python
alias py='python' py3='python3' pip='pip3' venv='python -m venv' activate='source ./venv/bin/activate'

# Node.js
alias n='npm' ni='npm install' nid='npm install --save-dev' nrb='npm run build' nrd='npm run dev'

# Process management
alias psg='ps aux | grep -v grep | grep -i' killall='killall -i' j='jobs' h='history'

# File opening
alias open='xdg-open' edit='$EDITOR' code='code'

# Safety aliases
alias reboot='echo "🔄 Use: systemctl reboot"'
alias shutdown='echo "🔌 Use: systemctl poweroff"'
alias poweroff='echo "🔌 Use: systemctl poweroff"'
alias halt='echo "⛔ Use: systemctl halt"'

# =====================================================
# 🎯 PRODUCTIVITY & MOTIVATION
# =====================================================

# Motivational aliases
alias salud='echo "💪 Respira profundo, toma agua y mantén una buena postura."'
alias coffee='echo "☕ Tómate un cafecito y sigue adelante."'
alias focus='echo "🎯 Enfócate en una tarea a la vez. Tú puedes."'

# Weather
alias clima='curl -s "wttr.in/Lima?format=3"' weather='curl -s "wttr.in/Lima"'

# =====================================================
# 🚀 ADVANCED FUNCTIONS
# =====================================================

# Extract function for various archive types
extract() {
    [[ -f "$1" ]] || { echo "'$1' is not a valid file"; return 1 }
    case "$1" in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz)  tar xzf "$1" ;;
        *.bz2)     bunzip2 "$1" ;;
        *.rar)     unrar x "$1" ;;
        *.gz)      gunzip "$1"  ;;
        *.tar)     tar xf "$1"  ;;
        *.tbz2)    tar xjf "$1" ;;
        *.tgz)     tar xzf "$1" ;;
        *.zip)     unzip "$1"   ;;
        *.Z)       uncompress "$1" ;;
        *.7z)      7z x "$1"    ;;
        *.xz)      unxz "$1"    ;;
        *.exe)     cabextract "$1" ;;
        *)         echo "'$1': unrecognized file compression" ;;
    esac
}

# Create directory and cd into it
mkcd() { mkdir -p "$1" && cd "$1" }

# Find and replace in files
findreplace() {
    [[ $# -eq 2 ]] || { echo "Usage: findreplace <search> <replace>"; return 1 }
    find . -type f -exec sed -i "s/$1/$2/g" {} +
}

# Quick backup of a file
backup() { cp "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)" }

# System information function
sysstat() {
    echo "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "Kernel: $(uname -r)"
    echo "Uptime: $(uptime -p)"
    echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Memory Usage: $(free -h | awk '/^Mem:/ {printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')"
    echo "Disk Usage: $(df -h / | awk 'NR==2 {printf "%s/%s (%s)", $3, $2, $5}')"
    echo "CPU Temperature: $(sensors 2>/dev/null | grep 'Core 0' | awk '{print $3}' || echo 'N/A')"
}

# Quick directory size
dirsize() { du -sh "$1" 2>/dev/null || echo "Directory not found" }

# Find files by extension
findext() { find . -name "*.$1" -type f }

# Count files by extension
countext() { find . -name "*.$1" -type f | wc -l }

# Quick search in files
search() { grep -r "$1" . --exclude-dir={.git,node_modules,.cache} }

# Create a new project directory
newproj() {
    [[ $# -eq 1 ]] || { echo "Usage: newproj <project_name>"; return 1 }
    mkcd "$1" && echo "Project '$1' created and entered"
}

# Quick note taking
note() {
    local note_file="$HOME/notes/$(date +%Y%m%d).md"
    mkdir -p "$(dirname "$note_file")"
    if [[ $# -eq 0 ]]; then
        $EDITOR "$note_file"
    else
        echo "$(date '+%H:%M'): $*" >> "$note_file"
        echo "Note added: $*"
    fi
}

# Quick todo
todo() {
    local todo_file="$HOME/todo.md"
    if [[ $# -eq 0 ]]; then
        $EDITOR "$todo_file"
    else
        echo "- [ ] $*" >> "$todo_file"
        echo "Todo added: $*"
    fi
}

# Quick calculator
calc() { echo "$*" | bc -l }

# Quick URL shortener
shorten() { curl -s "http://tinyurl.com/api-create.php?url=$1" }

# Quick QR code generator
qr() { echo "$1" | curl -F-=\<- qrenco.de }

# Quick password generator
passgen() { openssl rand -base64 "${1:-12}" | tr -d "=+/" | cut -c1-${1:-12} }

# Quick system update
sysupdate() {
    echo "🔄 Updating system..."
    sudo pacman -Syu
    if command -v yay &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        yay -Sua
    elif command -v paru &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        paru -Sua
    fi
    echo "✅ System updated!"
}

# Quick system cleanup
sysclean() {
    echo "🧹 Cleaning system..."
    sudo pacman -Sc
    sudo journalctl --vacuum-time=7d
    sudo pacman -Rns $(pacman -Qtdq) 2>/dev/null || true
    echo "✅ System cleaned!"
}

# =====================================================
# 🎨 COMPLETION ENHANCEMENTS
# =====================================================

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Better completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# SSH completion
zstyle ':completion:*:ssh:*' hosts off
zstyle ':completion:*:scp:*' hosts off

# =====================================================
# 🔌 PLUGIN CONFIGURATIONS
# =====================================================

# Autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,bold"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# Syntax highlighting
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[alias]='fg=cyan,bold'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[function]='fg=blue,bold'

# =====================================================
# 🏁 INITIALIZATION
# =====================================================

# Load completions
autoload -Uz compinit
compinit -d ~/.zsh/compdump

# Load zsh-autosuggestions and zsh-syntax-highlighting from system paths
[[ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
[[ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Load Node Version Manager (if exists)
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"

# Bun completions
[[ -s "$HOME/.bun/_bun" ]] && source "$HOME/.bun/_bun"

# Rust environment
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# FZF key bindings
[[ -f /usr/share/fzf/key-bindings.zsh ]] && source /usr/share/fzf/key-bindings.zsh
[[ -f /usr/share/fzf/completion.zsh ]] && source /usr/share/fzf/completion.zsh

# Initialize fastfetch (system info display)
command -v fastfetch &> /dev/null && fastfetch

# Load any additional custom configurations
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local 